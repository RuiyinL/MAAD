**Structured Technical Document**

---

### 1. **Goals**  
The architecture aims to achieve:  
- **Compatibility**: Support Flash-based media across browsers with fallback mechanisms.  
- **Adaptive Content Delivery**: Dynamic storylines driven by user progress and decisions.  
- **Secure Administration**: Role-based access control (RBAC) for question/update workflows.  
- **Cross-Browser Performance**: Optimized media loading ≤1 minute on 56k modems.  
- **Local Score Persistence**: Browser-local storage for scores with optional server sync.  
- **Interoperability**: Secure integration with external S2S projects via iframes/APIs.  
- **Scalability**: Stateless servers and CDNs to handle concurrent users.  
- **Maintainability**: Modular components and automated CI/CD pipelines.  

---

### 2. **Detailed Architecture Design**  
#### **Component Breakdown**  
| **Component**               | **Responsibilities**                                                                 |  
|------------------------------|---------------------------------------------------------------------------------------|  
| **Frontend UI**              | Renders Flash movies, handles user interactions, and integrates with media/CDN.      |  
| **Game State Manager**       | Tracks scores, persists to localStorage, and manages transitions (e.g., menu→game).  |  
| **Storyline Engine**         | Adjusts narrative branches using decision trees and user progress data.              |  
| **Admin Interface**          | Provides password-protected forms for editing questions; integrates with CMS.        |  
| **Security Module**          | Sanitizes inputs, enforces RBAC, and prevents XSS in external links.                 |  
| **Media Delivery Server**    | Streams compressed Flash assets via CDN; lazy-loads non-critical content.            |  
| **External Link Handler**    | Validates and opens S2S project links in new windows with security checks.           |  

#### **Interactions**  
1. **Game Initialization**:  
   - *Frontend UI* requests media from *Media Delivery Server*.  
   - *Game State Manager* initializes scores in *Local Storage*.  
2. **Admin Workflow**:  
   - *Admin Interface* authenticates users, validates inputs via *Security Module*, and updates *CMS*.  
3. **Storyline Adaptation**:  
   - *Storyline Engine* polls *User Progress Tracker* to adjust plot branches.  

---

### 3. **Component & Connector Specifications**  
#### **Communication Protocols**  
- **REST API (Admin Interface)**:  
  - `POST /api/questions`: Updates questions (requires RBAC token).  
  - **Request Body**: `{ "id": 101, "text": "What is ½ of ⅔?", "hint": "Multiply numerators." }`  
  - **Error Handling**: Returns `401 Unauthorized` for invalid tokens; `400 Bad Request` for invalid inputs.  

- **WebSocket (Real-Time Updates)**:  
  - Broadcasts storyline changes to clients (e.g., `{"event": "plotBranchUpdate", "scene": "alienEncounter"}`).  

- **Event-Driven Messaging (Storyline)**:  
  - Events: `AnswerSubmitted`, `CriticalDecisionMade`.  
  - Payload: `{ "userId": "abc", "scoreDelta": +10, "decisionId": "x1y2" }`.  

#### **Performance Thresholds**  
- Media load time: ≤60s on 56k modem.  
- API response time: ≤500ms (p95).  
- Error rate: <0.1% for critical paths.  

---

### 4. **Key Technologies**  
- **Frontend**: Adobe Flash (legacy) + Ruffle emulator (fallback), JavaScript.  
- **Backend**: Node.js (real-time APIs), MongoDB (questions/user progress).  
- **Media Delivery**: AWS CloudFront (CDN), FFmpeg (Flash compression).  
- **Security**: OWASP ZAP (scanning), bcrypt (password hashing).  
- **Infrastructure**: Kubernetes (scaling), Redis (caching).  

#### **Scalability/Fault Tradeoffs**  
- **Stateless Servers**: Enable horizontal scaling but require session externalization.  
- **Local Storage**: Reduces server load but limits cross-device score access.  

---

### 5. **Design Decisions**  
1. **Microservices Over Monolith**:  
   - Enables independent scaling of media delivery vs. gameplay logic.  
2. **MVC Pattern (Admin Interface)**:  
   - Separates form rendering (View), validation (Controller), and CMS updates (Model).  
3. **State Pattern (Game State Manager)**:  
   - Encapsulates transitions (e.g., `Idle→Playing→Ending`).  
4. **Event Sourcing (Storyline Engine)**:  
   - Reconstructs user progress from event logs for debugging.  

---

### 6. **Design Decision Rationale**  
- **Flash Dependency**: Mandated by existing media assets (DC-001); Ruffle provides fallback.  
- **Local Storage for Scores**: Meets ASR-004’s offline requirement; avoids server costs.  
- **CDN Integration**: Addresses ASR-007’s modem constraints via edge caching.  
- **RBAC (Admin)**: Aligns with ASR-002’s security needs; uses Auth0 for OAuth.  

---

### 7. **Executable Prototype Skeleton**  
#### **Frontend UI (Flash/JavaScript)**  
```actionscript  
// Flash-based UI (MainMenu.as)  
class MainMenu extends MovieClip {  
  public function loadMovie(url: String): void {  
    // Fetch media from CDN  
    MediaDeliveryServer.deliverMedia(url);  
  }  
}  
```

#### **Game State Manager (Node.js)**  
```javascript  
class GameStateManager {  
  constructor() { this.state = {}; }  

  persistScore(score) {  
    localStorage.setItem('score', JSON.stringify(score));  
  }  
}  
```

#### **Storyline Engine (Python)**  
```python  
class StorylineEngine:  
    def __init__(self):  
        self.branch_rules = load_rules("rules.json")  

    def adjust_storyline(self, user_progress):  
        return self.branch_rules.evaluate(user_progress)  
```

#### **Admin Interface (React)**  
```jsx  
function QuestionForm() {  
  const [question, setQuestion] = useState("");  
  return (  
    <form onSubmit={(e) => CMS.saveQuestion(question)}>  
      <input onChange={(e) => SecurityModule.sanitize(e.target.value)} />  
    </form>  
  );  
}  
```

#### **Media Delivery (AWS Lambda)**  
```python  
def lambda_handler(event, context):  
    asset = event['pathParameters']['asset']  
    return redirect(CDN_URL + compress(asset))  
```

--- 

This document aligns with the architectural views (logical, process, deployment) and addresses all ASRs/NFRs through modular, scalable design choices.